import * as diff from "diff";
import path from "path";

export function changeExtension(file: string, extension: string) {
  const basename = path.basename(file, path.extname(file));
  return path.join(path.dirname(file), basename + extension);
}

export function pluralize(count: number, noun: string, suffix = "s") {
  return `${count} ${noun}${count !== 1 ? suffix : ""}`;
}

/**
 * Rounds to maxDecimals places after the comma.
 * Converting this to a string will give the digits after comma only if they differ from 0
 * (if the number of characters after the comma needs to be constant, use `Number.prototype.toFixed`)
 */
export function round(number: number, maxDecimals = 2): number {
  return Math.round(number * 10 ** maxDecimals) / 10 ** maxDecimals;
}

export function getExtension(path: string) {
  return path.slice(((path.lastIndexOf(".") - 1) >>> 0) + 2);
}

export function countChangedLines(contents_at_base: string, contents_at_head: string) {
  return diff
    .diffLines(contents_at_base, contents_at_head)
    .filter((hunk) => hunk.added)
    .reduce((x, y) => (y.count ?? 0) + x, 0);
}

export function hashCode(s: string): number {
  let h = 0;
  for (let i = 0; i < s.length; i++) h = (Math.imul(31, h) + s.charCodeAt(i)) | 0;

  return h;
}

export function parseBoolean(o: any): boolean | undefined {
  if (o === undefined) {
    return undefined;
  }
  if (o === null) {
    return undefined;
  }
  return String(o).toLowerCase() === "true";
}

export function parseNumber(o: any): number | undefined {
  if (o === undefined) {
    return undefined;
  }
  if (o === null) {
    return undefined;
  }
  if (String(o) === "NaN") {
    return NaN;
  }
  const result = Number(o);
  if (isNaN(result)) {
    return undefined;
  }
  return result;
}

export function delay(ms: number): Promise<void> {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

export function logError(e: Error) {
  console.error("An unhandled error occurred: ", e);
}

export function getLabel(
  markerForTag: string,
  sha: string,
  hide: "hide-attribution" | "show-attribution"
): string {
  if (hide === "hide-attribution") {
    return `<!--
${markerForTag}
-->
`;
  }
  return `<!--
${markerForTag}
-->
### <samp>ðŸ¤– Generated by Copilot at ${sha.substring(0, 7)}</samp>
`;
}
